{"id":"bpv-01","title":"Create BuildPlanDetailsHeader Component","description":"Develop the React component 'BuildPlanDetailsHeader.tsx' based on the specification from the manifest. This component will display the app idea title, build plan name/status, and action buttons. It should be styled with Tailwind CSS.","expected_files":["user/src/components/BuildPlanDetailsHeader.tsx"],"checks":["file exists","export default function BuildPlanDetailsHeader","uses Tailwind CSS classes","displays title, name, status","includes Refine Plan, Export Tasks, Generate No-Code Blueprints buttons"],"prompt_template":"SYSTEM: You are an expert React and Next.js developer with strong Tailwind CSS skills. Your task is to create a new React functional component.\n\nRead the following component specification from the 'build-plan-view-page' section of the provided '/machine/manifest.json' file:\n- Component ID: `plan-details-header`\n- Specification: \"Display the 'App Idea Title' and 'Current Build Plan Name/Status' prominently at the top of the page. Include action buttons like 'Refine Plan', 'Export Tasks', and 'Generate No-Code Blueprints'. Use a clean, functional layout with Tailwind CSS.\"\n\nUSER: Create the `BuildPlanDetailsHeader.tsx` component in `user/src/components/BuildPlanDetailsHeader.tsx`. This component should accept props for `appIdeaTitle`, `planName`, and `planStatus`. Implement the specified UI using Tailwind CSS for styling and responsiveness. Ensure the action buttons are present and clearly labeled. The component should be a default export."}
{"id":"bpv-02","title":"Create InteractiveBuildPlanVisualization Component","description":"Develop the React component 'InteractiveBuildPlanVisualization.tsx' based on the specification from the manifest. This component will visualize the AI-generated build plan, showing phases, tasks, dependencies, and suggested technologies. It should be styled with Tailwind CSS.","expected_files":["user/src/components/InteractiveBuildPlanVisualization.tsx"],"checks":["file exists","export default function InteractiveBuildPlanVisualization","uses Tailwind CSS classes","renders a visualization of tasks/phases","tasks are clickable"],"prompt_template":"SYSTEM: You are an expert React and Next.js developer with strong Tailwind CSS skills. Your task is to create a new React functional component.\n\nRead the following component specification from the 'build-plan-view-page' section of the provided '/machine/manifest.json' file:\n- Component ID: `interactive-plan-visualization`\n- Specification: \"Create an interactive component to visualize the AI-generated build plan. This could be a timeline, a Kanban board, or a hierarchical tree view. It should clearly show phases, tasks, dependencies, and suggested technologies. Each task should be clickable to reveal more details in a sidebar or modal. Allow for drag-and-drop reordering/rephasing if technically feasible. Use a library like React Flow, D3, or a custom component with Tailwind CSS.\"\n\nUSER: Create the `InteractiveBuildPlanVisualization.tsx` component in `user/src/components/InteractiveBuildPlanVisualization.tsx`. This component should accept a `buildPlan` prop (an array of phases, where each phase contains tasks). For the initial implementation, create a simple, expandable tree view or a list-based visualization that displays phases and their tasks. Each task should be clickable, emitting an event or calling a prop function (e.g., `onTaskClick(taskId)`) when clicked. Use Tailwind CSS for styling. Do not implement drag-and-drop in this initial version, but consider its future integration in the component's structure. The component should be a default export."}
{"id":"bpv-03","title":"Create TaskDetailsSidebar Component","description":"Develop the React component 'TaskDetailsSidebar.tsx' based on the specification from the manifest. This component will display detailed information about a selected task and provide edit/completion options. It should be styled with Tailwind CSS.","expected_files":["user/src/components/TaskDetailsSidebar.tsx"],"checks":["file exists","export default function TaskDetailsSidebar","uses Tailwind CSS classes","displays task title, description, effort, technology","includes edit/save/cancel/complete buttons"],"prompt_template":"SYSTEM: You are an expert React and Next.js developer with strong Tailwind CSS skills. Your task is to create a new React functional component.\n\nRead the following component specification from the 'build-plan-view-page' section of the provided '/machine/manifest.json' file:\n- Component ID: `task-details-sidebar`\n- Specification: \"Design a sidebar or modal that appears when a task in the visualization is clicked. It should display detailed information about the selected task: title, description, estimated effort, assigned technology, suggested AI agent prompt/no-code platform hint, and options to edit or mark complete. Include a save/cancel functionality if editing is allowed within the sidebar. Use Tailwind CSS for styling.\"\n\nUSER: Create the `TaskDetailsSidebar.tsx` component in `user/src/components/TaskDetailsSidebar.tsx`. This component should accept a `selectedTask` prop (an object containing task details like title, description, estimated_effort, assigned_technology, ai_prompt_hint, no_code_hint, status). Implement a sidebar UI that displays these details. Include placeholder buttons for 'Edit', 'Mark Complete', 'Save', and 'Cancel'. Use Tailwind CSS for styling. The component should be a default export."}
{"id":"bpv-04","title":"Create Build Plan View Page","description":"Create the Next.js page 'page.tsx' for viewing a specific build plan. This page will fetch the build plan data using its ID from the URL, integrate the 'BuildPlanDetailsHeader' and 'InteractiveBuildPlanVisualization' components, and manage the display of the 'TaskDetailsSidebar'.","expected_files":["user/src/app/plan/[id]/page.tsx"],"checks":["file exists","fetches build plan data based on URL 'id'","renders BuildPlanDetailsHeader","renders InteractiveBuildPlanVisualization","manages state for selected task and TaskDetailsSidebar visibility"],"prompt_template":"SYSTEM: You are an expert React and Next.js developer. Your task is to create a new Next.js page for displaying a build plan.\n\nRead the following UI flow for 'Build Plan Management & Refinement' from '/machine/manifest.json', specifically the steps related to viewing a plan.\n\nUSER: Create the `page.tsx` file for the build plan view page at `user/src/app/plan/[id]/page.tsx`. This page should:\n1.  Fetch the `buildPlan` data from the backend using the `id` from the URL parameters. Assume an API endpoint `GET /api/plans/[id]` exists for this purpose. Implement client-side data fetching (e.g., using `useEffect` and `fetch` or a dedicated data fetching library/hook) to call this endpoint.\n2.  Import and render the `BuildPlanDetailsHeader` component, passing the fetched `appIdeaTitle`, `planName`, and `planStatus` as props.\n3.  Import and render the `InteractiveBuildPlanVisualization` component, passing the fetched `buildPlan` data as a prop.\n4.  Implement state management to track the `selectedTask` (when a task in the visualization is clicked) and control the visibility of the `TaskDetailsSidebar`.\n5.  Import and render the `TaskDetailsSidebar` component, passing the `selectedTask` as a prop and ensuring it's only visible when a task is selected.\n6.  Ensure the page is responsive and styled using Tailwind CSS, potentially by wrapping components in appropriate layout elements.\n7.  Handle loading and error states gracefully (e.g., display a loading spinner, error message)."}