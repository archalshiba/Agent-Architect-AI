{"id":"testing-01","title":"Setup Jest for Unit Testing","description":"Install Jest, React Testing Library, and configure Jest for a Next.js project. Create `jest.config.js` in the project root and update `package.json` with necessary scripts and dependencies. Ensure Jest is configured to handle Next.js specific features like CSS Modules, image imports, and path aliases.","expected_files":["package.json","jest.config.js","tsconfig.json"],"checks":["file exists: jest.config.js","package.json contains \"test\" script","package.json contains \"jest\" dependency","jest.config.js contains \"preset\": \"next\""],"prompt_template":"SYSTEM: You are an expert Next.js developer tasked with setting up unit testing. Your goal is to configure Jest for a Next.js project. USER: Perform the following steps:\n1. Install `jest`, `@testing-library/react`, `@testing-library/jest-dom`, `jest-environment-jsdom`, `@types/jest`, and `@types/testing-library__jest-dom` as dev dependencies.\n2. Create a `jest.config.js` file in the project root. This configuration should extend from `next/jest`, configure `testEnvironment` to `jsdom`, and set up module name mappings for CSS/image files (e.g., using `identity-obj-proxy`).\n3. Add a `test` script to `package.json` that runs `jest --watch`.\n4. Ensure `tsconfig.json` includes `jest` types by adding `\"jest\"` to the `types` array in `compilerOptions`."}
{"id":"testing-02","title":"Setup Cypress for End-to-End Testing","description":"Install Cypress and initialize its configuration. This includes creating `cypress.config.ts`, `cypress/support/e2e.ts`, and adding necessary scripts to `package.json`. Configure Cypress for a Next.js application, setting the `baseUrl` to the local development server.","expected_files":["package.json","cypress.config.ts","cypress/support/e2e.ts"],"checks":["file exists: cypress.config.ts","package.json contains \"cypress:open\" script","package.json contains \"cypress\" dependency"],"prompt_template":"SYSTEM: You are an expert Next.js developer tasked with setting up end-to-end testing. Your goal is to configure Cypress for a Next.js project. USER: Perform the following steps:\n1. Install `cypress` as a dev dependency.\n2. Initialize Cypress configuration by creating the necessary files manually. Focus on `cypress.config.ts` in the project root and `cypress/support/e2e.ts`.\n3. In `cypress.config.ts`, configure `e2e` tests to be in `cypress/e2e` and set the `baseUrl` to `http://localhost:3000`.\n4. Add a `cypress:open` script to `package.json` that runs `cypress open` and a `cypress:run` script that runs `cypress run`."}
{"id":"testing-03","title":"Create Boilerplate Unit Test for Header (Unauthenticated)","description":"Create a basic unit test file for the `Header (Unauthenticated)` component using Jest and React Testing Library. The test should verify that the component renders without crashing and displays the 'Agent Architect AI' logo text and specific navigation links ('Login', 'Sign Up'). Assume the component is located at `user/src/components/HeaderUnauthenticated.tsx` and the test file should be placed in `user/src/tests/unit/components/`.","expected_files":["user/src/tests/unit/components/HeaderUnauthenticated.test.tsx"],"checks":["file exists: user/src/tests/unit/components/HeaderUnauthenticated.test.tsx","contains 'Agent Architect AI'","contains 'Login'","contains 'Sign Up'"],"prompt_template":"SYSTEM: You are an expert React/Next.js developer writing unit tests. Your task is to create a boilerplate unit test for the `Header (Unauthenticated)` component using Jest and React Testing Library. The component specification is: 'Create a responsive header component with a logo 'Agent Architect AI' on the left, primary navigation links (Home, Features, Pricing) in the center, and 'Login' and 'Sign Up' buttons on the right. Use a clean, modern design with Tailwind CSS.'. Assume the component file is located at `user/src/components/HeaderUnauthenticated.tsx`.\nUSER: Create a new test file at `user/src/tests/unit/components/HeaderUnauthenticated.test.tsx`.\n\nIn this file, write a test suite that:\n1. Imports `render` from `@testing-library/react` and `screen`.\n2. Imports the `HeaderUnauthenticated` component.\n3. Renders the `HeaderUnauthenticated` component.\n4. Asserts that the text 'Agent Architect AI' is present in the document.\n5. Asserts that a 'Login' link/button is present.\n6. Asserts that a 'Sign Up' link/button is present."}
{"id":"testing-04","title":"Create Boilerplate E2E Test for User Login Page","description":"Create a basic end-to-end test file using Cypress to verify that the authentication page renders correctly and contains the login form elements. This test should visit the login page (path `/auth/login`) and assert the presence of email and password input fields and a login button. The test file should be placed in `cypress/e2e/auth/`.","expected_files":["cypress/e2e/auth/login.cy.ts"],"checks":["file exists: cypress/e2e/auth/login.cy.ts","contains 'Email'","contains 'Password'","contains 'Login'"],"prompt_template":"SYSTEM: You are an expert E2E testing engineer using Cypress. Your task is to create a boilerplate end-to-end test for the user login page. The authentication page specification is: 'Create a clean, centered card-style form component that can switch between 'Login' and 'Sign Up' states. For Login, include email and password fields, a 'Forgot Password' link, and a submit button.'. Assume the login page is accessible at the path `/auth/login`.\nUSER: Create a new test file at `cypress/e2e/auth/login.cy.ts`.\n\nIn this file, write a test suite that:\n1. Visits the `/auth/login` page.\n2. Asserts that an input field for 'Email' is visible and exists (e.g., using `cy.get('input[type=\"email\"]')` or `cy.contains('Email').should('be.visible')`).\n3. Asserts that an input field for 'Password' is visible and exists (e.g., using `cy.get('input[type=\"password\"]')` or `cy.contains('Password').should('be.visible')`).\n4. Asserts that a 'Login' button is visible and enabled (e.g., `cy.contains('Login').should('be.visible').and('not.be.disabled')`)."}