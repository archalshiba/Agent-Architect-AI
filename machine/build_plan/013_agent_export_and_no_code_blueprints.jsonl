{"id":"export-01","title":"Create Backend API Route for Agent Task Export","description":"Develop a new Next.js API route at `/api/plans/export-agent-tasks` to handle POST requests. This route will receive a `buildPlanId` in the request body, fetch the corresponding `BuildPlan` and its latest `PlanRevision` from Supabase (using `plan_content`), and then use a utility function (to be created in a later task) to format this content into agent-specific tasks. The route should return the formatted content as a downloadable file (e.g., markdown or JSONL). Reference the `BuildPlan` and `PlanRevision` data models from `manifest.json` for schema details.","expected_files":["/user/src/app/api/plans/export-agent-tasks/route.ts"],"checks":["file exists","exports a POST function","reads buildPlanId from request body","uses Supabase client to fetch BuildPlan and PlanRevision","handles errors and returns appropriate HTTP responses"],"prompt_template":"SYSTEM: You are a senior Next.js backend developer. Your goal is to create a new API route. USER: Create a file at `/user/src/app/api/plans/export-agent-tasks/route.ts`. This route should handle POST requests. It needs to accept a JSON body containing `buildPlanId: string`. \n\n1. Use the Supabase client (assume `supabaseServer` is available from `/user/src/lib/supabase/server.ts`) to fetch the `BuildPlan` using the provided `buildPlanId`. \n2. Then, fetch the latest `PlanRevision` associated with that `BuildPlan`, specifically its `plan_content` (which is `jsonb`).\n3. Implement placeholder logic to process the `plan_content` into an agent-specific format (e.g., a simple string representation for now, or use a dummy formatter function). The actual formatting logic will be developed in a separate utility. \n4. Respond with the processed content as a downloadable file. Set appropriate headers for content-type (e.g., `text/markdown` or `application/jsonl`) and content-disposition.\n\nHere are the relevant data models from `manifest.json`:\n```json\n{\"dataModels\": [{\"modelName\":\"BuildPlan\",\"fields\":[{\"name\":\"id\",\"type\":\"uuid\",\"constraints\":[\"primary key\",\"default gen_random_uuid()\"]},{\"name\":\"app_idea_id\",\"type\":\"uuid\",\"constraints\":[\"not null\",\"references AppIdea(id) on delete cascade\"]},{\"name\":\"plan_name\",\"type\":\"text\",\"constraints\":[\"not null\"]},{\"name\":\"status\",\"type\":\"text\",\"constraints\":[\"not null\",\"default 'draft'\"]},{\"name\":\"current_revision_id\",\"type\":\"uuid\",\"constraints\":[\"references PlanRevision(id) on delete set null\"]},{\"name\":\"created_at\",\"type\":\"timestamp with time zone\",\"constraints\":[\"not null\",\"default now()\"]},{\"name\":\"updated_at\",\"type\":\"timestamp with time zone\",\"constraints\":[\"not null\",\"default now()\"]}],\"tableConstraints\":[\"UNIQUE (app_idea_id, plan_name)\"]},{\"modelName\":\"PlanRevision\",\"fields\":[{\"name\":\"id\",\"type\":\"uuid\",\"constraints\":[\"primary key\",\"default gen_random_uuid()\"]},{\"name\":\"build_plan_id\",\"type\":\"uuid\",\"constraints\":[\"not null\",\"references BuildPlan(id) on delete cascade\"]},{\"name\":\"revision_number\",\"type\":\"integer\",\"constraints\":[\"not null\"]},{\"name\":\"plan_content\",\"type\":\"jsonb\",\"constraints\":[\"not null\"]},{\"name\":\"generated_by_ai\",\"type\":\"boolean\",\"constraints\":[\"not null\"]},{\"name\":\"editor_user_id\",\"type\":\"uuid\",\"constraints\":[\"references User(id) on delete set null\"]},{\"name\":\"created_at\",\"type\":\"timestamp with time zone\",\"constraints\":[\"not null\",\"default now()\"]},{\"name\":\"updated_at\",\"type\":\"timestamp with time zone\",\"constraints\":[\"not null\",\"default now()\"]}],\"tableConstraints\":[\"UNIQUE (build_plan_id, revision_number)\"]}]}\n```"}
{"id":"export-02","title":"Implement Agent Task Formatter Utility","description":"Create a utility function that takes the `plan_content` (a `jsonb` object representing the build plan with phases, tasks, etc.) from a `PlanRevision` and transforms it into a human-readable and AI-agent-friendly string. This could be markdown, JSONL, or a series of structured comments, suitable for direct input to an AI coding assistant like Copilot or Cody. The output should clearly delineate tasks, technologies, and suggested actions.","expected_files":["/user/src/lib/export/agentTaskFormatter.ts"],"checks":["file exists","exports a function named `formatAgentTasks`","accepts a `planContent: any` object as input","returns a string (e.g., markdown)"],"prompt_template":"SYSTEM: You are an expert in generating structured output for AI coding agents. USER: Create a file at `/user/src/lib/export/agentTaskFormatter.ts`. \n\nImplement and export a function named `formatAgentTasks(planContent: any): string`. This function should receive the `plan_content` from a `PlanRevision` (which is a JSONB object containing the structured build plan). \n\nThe goal is to transform this `planContent` into a descriptive markdown string that can serve as a detailed prompt for an AI coding agent. \n\nFor an MVP, iterate through the main sections/tasks within the `planContent` and format them as markdown headings, bullet points, and code blocks. Emphasize task titles, descriptions, suggested technologies, and any hints for implementation. Include a top-level summary. For example, if `planContent` has a 'phases' array, iterate through phases, and then through tasks within each phase. \n\nExample structure for output:\n```markdown\n# Build Plan: [Plan Title]\n\n## Overview\n[Brief summary of the plan]\n\n## Phase 1: [Phase Name]\n\n### Task 1.1: [Task Title]\n- **Description**: [Task Description]\n- **Technology**: [Suggested Technology]\n- **Prompt Hint**: [Suggest a prompt for an AI agent for this task]\n\n### Task 1.2: [Task Title]\n...\n\n## Phase 2: [Phase Name]\n...\n```"}
{"id":"export-03","title":"Create Backend API Route for No-Code Blueprint Generation","description":"Develop a new Next.js API route at `/api/plans/export-no-code-blueprint` to handle POST requests. This route will receive a `buildPlanId` in the request body, fetch the corresponding `BuildPlan` and its latest `PlanRevision` (`plan_content`) from Supabase, and then use a utility function (to be created in a later task) to transform this content into a no-code platform-agnostic blueprint or checklist. The route should return the formatted content as a downloadable file (e.g., markdown or JSON). Reference the `BuildPlan` and `PlanRevision` data models from `manifest.json` for schema details.","expected_files":["/user/src/app/api/plans/export-no-code-blueprint/route.ts"],"checks":["file exists","exports a POST function","reads buildPlanId from request body","uses Supabase client to fetch BuildPlan and PlanRevision","handles errors and returns appropriate HTTP responses"],"prompt_template":"SYSTEM: You are a senior Next.js backend developer. Your goal is to create a new API route. USER: Create a file at `/user/src/app/api/plans/export-no-code-blueprint/route.ts`. This route should handle POST requests. It needs to accept a JSON body containing `buildPlanId: string`. \n\n1. Use the Supabase client (assume `supabaseServer` is available from `/user/src/lib/supabase/server.ts`) to fetch the `BuildPlan` using the provided `buildPlanId`. \n2. Then, fetch the latest `PlanRevision` associated with that `BuildPlan`, specifically its `plan_content` (which is `jsonb`).\n3. Implement placeholder logic to process the `plan_content` into a no-code blueprint format (e.g., a simple string representation for now, or use a dummy generator function). The actual generation logic will be developed in a separate utility. \n4. Respond with the processed content as a downloadable file. Set appropriate headers for content-type (e.g., `text/markdown` or `application/json`).\n\nHere are the relevant data models from `manifest.json`:\n```json\n{\"dataModels\": [{\"modelName\":\"BuildPlan\",\"fields\":[{\"name\":\"id\",\"type\":\"uuid\",\"constraints\":[\"primary key\",\"default gen_random_uuid()\"]},{\"name\":\"app_idea_id\",\"type\":\"uuid\",\"constraints\":[\"not null\",\"references AppIdea(id) on delete cascade\"]},{\"name\":\"plan_name\",\"type\":\"text\",\"constraints\":[\"not null\"]},{\"name\":\"status\",\"type\":\"text\",\"constraints\":[\"not null\",\"default 'draft'\"]},{\"name\":\"current_revision_id\",\"type\":\"uuid\",\"constraints\":[\"references PlanRevision(id) on delete set null\"]},{\"name\":\"created_at\",\"type\":\"timestamp with time zone\",\"constraints\":[\"not null\",\"default now()\"]},{\"name\":\"updated_at\",\"type\":\"timestamp with time zone\",\"constraints\":[\"not null\",\"default now()\"]}],\"tableConstraints\":[\"UNIQUE (app_idea_id, plan_name)\"]},{\"modelName\":\"PlanRevision\",\"fields\":[{\"name\":\"id\",\"type\":\"uuid\",\"constraints\":[\"primary key\",\"default gen_random_uuid()\"]},{\"name\":\"build_plan_id\",\"type\":\"uuid\",\"constraints\":[\"not null\",\"references BuildPlan(id) on delete cascade\"]},{\"name\":\"revision_number\",\"type\":\"integer\",\"constraints\":[\"not null\"]},{\"name\":\"plan_content\",\"type\":\"jsonb\",\"constraints\":[\"not null\"]},{\"name\":\"generated_by_ai\",\"type\":\"boolean\",\"constraints\":[\"not null\"]},{\"name\":\"editor_user_id\",\"type\":\"uuid\",\"constraints\":[\"references User(id) on delete set null\"]},{\"name\":\"created_at\",\"type\":\"timestamp with time zone\",\"constraints\":[\"not null\",\"default now()\"]},{\"name\":\"updated_at\",\"type\":\"timestamp with time zone\",\"constraints\":[\"not null\",\"default now()\"]}],\"tableConstraints\":[\"UNIQUE (build_plan_id, revision_number)\"]}]}\n```"}
{"id":"export-04","title":"Implement No-Code Blueprint Generator Utility","description":"Create a utility function that takes the `plan_content` (a `jsonb` object representing the build plan with phases, tasks, etc.) from a `PlanRevision` and transforms it into a detailed blueprint or checklist suitable for a generic no-code platform. This should cover aspects like suggested data models, workflow steps, and UI component structures, presented in a clear, actionable format (e.g., markdown or structured JSON).","expected_files":["/user/src/lib/export/noCodeBlueprintGenerator.ts"],"checks":["file exists","exports a function named `generateNoCodeBlueprint`","accepts a `planContent: any` object as input","returns a string (e.g., markdown or JSON string)"],"prompt_template":"SYSTEM: You are an expert in translating software plans into no-code platform blueprints. USER: Create a file at `/user/src/lib/export/noCodeBlueprintGenerator.ts`. \n\nImplement and export a function named `generateNoCodeBlueprint(planContent: any): string`. This function should receive the `plan_content` from a `PlanRevision` (which is a JSONB object containing the structured build plan). \n\nThe goal is to transform this `planContent` into a descriptive markdown string that serves as a detailed blueprint or checklist for building the application on a generic no-code platform. \n\nFor an MVP, iterate through the main sections/tasks within the `planContent` and format them as markdown. Focus on extracting: \n- **Data Model suggestions**: Based on any data references in tasks. \n- **Workflow steps**: Sequential actions described in the plan.\n- **UI Component outlines**: Descriptions of UI elements and their functionalities. \n\nExample structure for output:\n```markdown\n# No-Code Blueprint: [Plan Title]\n\n## Data Models\n- **[Model Name]**:\n  - Fields: [Field 1], [Field 2]\n  - Relationships: [Related Model]\n\n## Workflows\n### Workflow: [Workflow Name]\n- Trigger: [Event]\n- Steps:\n  1. [Step 1 description]\n  2. [Step 2 description]\n\n## UI Components\n### Page: [Page Name]\n- Components:\n  - [Component Name]: [Description & Purpose]\n  - Input fields: [List of fields]\n  - Buttons: [List of buttons and their actions]\n```"}
{"id":"export-05","title":"Update Plan Details Header for Agent Task Export","description":"Modify the `PlanDetailsHeader` component to add client-side functionality for the 'Export Tasks' button. When clicked, it should send a POST request to the `/api/plans/export-agent-tasks` API route, including the current `buildPlanId`. Upon successful response, it should trigger a file download of the received content (e.g., a `.md` or `.jsonl` file). Ensure appropriate error handling and user feedback.","expected_files":["/user/src/components/PlanDetailsHeader.tsx"],"checks":["button has an `onClick` handler","initiates a fetch POST request to `/api/plans/export-agent-tasks`","includes `buildPlanId` in the request body","uses `fetch` or a similar client-side method to trigger file download","handles success and error states"],"prompt_template":"SYSTEM: You are a React/Next.js frontend developer. Your task is to add functionality to an existing component. USER: Locate and open the file `/user/src/components/PlanDetailsHeader.tsx`. \n\nAdd an `onClick` handler to the 'Export Tasks' button. This handler should:\n1. Get the current `buildPlanId` (assume it's available as a prop or context variable named `buildPlanId: string`).\n2. Make a `POST` request to the `/api/plans/export-agent-tasks` endpoint.\n3. The request body should be `JSON.stringify({ buildPlanId })`.\n4. Upon a successful response (status 200), parse the response as `text` or `blob` and trigger a file download. The filename should be `agent-tasks-[buildPlanId].md` (or `.jsonl` depending on the expected format from the backend). Use a helper function for file download if available, or implement directly using `Blob` and `URL.createObjectURL`.\n5. Implement basic error handling (e.g., log to console, show an alert).\n\nHere is the component specification from `manifest.json`:\n```json\n{\"id\":\"plan-details-header\",\"name\":\"Plan Details Header\",\"enabled\":true,\"specification\":\"Display the 'App Idea Title' and 'Current Build Plan Name/Status' prominently at the top of the page. Include action buttons like 'Refine Plan', 'Export Tasks', and 'Generate No-Code Blueprints'. Use a clean, functional layout with Tailwind CSS.\"}\n```"}
{"id":"export-06","title":"Update Plan Details Header for No-Code Blueprint Export","description":"Modify the `PlanDetailsHeader` component to add client-side functionality for the 'Generate No-Code Blueprints' button. When clicked, it should send a POST request to the `/api/plans/export-no-code-blueprint` API route, including the current `buildPlanId`. Upon successful response, it should trigger a file download of the received content (e.g., a `.md` or `.json` file). Ensure appropriate error handling and user feedback.","expected_files":["/user/src/components/PlanDetailsHeader.tsx"],"checks":["button has an `onClick` handler","initiates a fetch POST request to `/api/plans/export-no-code-blueprint`","includes `buildPlanId` in the request body","uses `fetch` or a similar client-side method to trigger file download","handles success and error states"],"prompt_template":"SYSTEM: You are a React/Next.js frontend developer. Your task is to add functionality to an existing component. USER: Locate and open the file `/user/src/components/PlanDetailsHeader.tsx`. \n\nAdd an `onClick` handler to the 'Generate No-Code Blueprints' button. This handler should:\n1. Get the current `buildPlanId` (assume it's available as a prop or context variable named `buildPlanId: string`).\n2. Make a `POST` request to the `/api/plans/export-no-code-blueprint` endpoint.\n3. The request body should be `JSON.stringify({ buildPlanId })`.\n4. Upon a successful response (status 200), parse the response as `text` or `blob` and trigger a file download. The filename should be `no-code-blueprint-[buildPlanId].md` (or `.json` depending on the expected format from the backend). Use a helper function for file download if available, or implement directly using `Blob` and `URL.createObjectURL`.\n5. Implement basic error handling (e.g., log to console, show an alert).\n\nHere is the component specification from `manifest.json`:\n```json\n{\"id\":\"plan-details-header\",\"name\":\"Plan Details Header\",\"enabled\":true,\"specification\":\"Display the 'App Idea Title' and 'Current Build Plan Name/Status' prominently at the top of the page. Include action buttons like 'Refine Plan', 'Export Tasks', and 'Generate No-Code Blueprints'. Use a clean, functional layout with Tailwind CSS.\"}\n```"}