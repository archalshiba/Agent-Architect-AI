{"id":"build-plan-api-01","title":"Create POST /api/plans endpoint for Build Plan creation","description":"Implement the `POST` method in `/user/src/app/api/plans/route.ts` to create a new `BuildPlan` in the Supabase database. The endpoint should expect `app_idea_id` and `plan_name` in the request body, validate them, and link the new `BuildPlan` to an `AppIdea` that belongs to the authenticated user. It should handle errors and return appropriate HTTP responses.","expected_files":["/user/src/app/api/plans/route.ts"],"checks":["file exists","export const POST","uses supabaseServer","inserts into build_plans table","handles authentication"],"prompt_template":"SYSTEM: You are an expert Next.js API route developer. Your task is to create a new API endpoint.\nUSER: Create the file `/user/src/app/api/plans/route.ts`.\nImplement the `POST` method for this route.\nThis endpoint will be responsible for creating a new `BuildPlan` record in the Supabase database.\n\n**Data Model Context:**\nThe `BuildPlan` model from `/machine/manifest.json` has the following relevant fields: `id` (UUID), `app_idea_id` (UUID, not null, references AppIdea), `plan_name` (text, not null), `status` (text, default 'draft'), `created_at`, `updated_at`. The `AppIdea` model has a `user_id` field which links to the `User` model.\n\nThe request body for the `POST` method will contain:\n- `app_idea_id`: UUID of the associated `AppIdea`.\n- `plan_name`: String, the name of the new build plan.\n\n**Functionality:**\n1.  Get the authenticated user's session and ID using `supabaseServer` from `/user/src/lib/supabase/server.ts`. If no user is authenticated, return a 401 Unauthorized response.\n2.  Extract `app_idea_id` and `plan_name` from the request body. Validate that these fields are present and correctly formatted.\n3.  Before inserting, verify that the `AppIdea` corresponding to `app_idea_id` actually belongs to the authenticated user. If not, return a 403 Forbidden response.\n4.  Insert a new record into the `build_plans` table using the `supabaseServer` client, setting `status` to 'draft' by default.\n5.  Return a 201 Created response with the newly created `BuildPlan` data on success.\n6.  Handle any errors during database interaction or authentication, returning appropriate 500 or 400 responses.\nEnsure the code is robust and follows Next.js API route conventions."}
{"id":"build-plan-api-02","title":"Implement GET /api/plans endpoint to list Build Plans","description":"Add the `GET` method to `/user/src/app/api/plans/route.ts` to retrieve all `BuildPlan`s associated with the authenticated user. The endpoint should query the Supabase database, filter by `user_id` (implicitly through `app_idea_id` -> `AppIdea` -> `user_id`), and return a list of plans.","expected_files":["/user/src/app/api/plans/route.ts"],"checks":["file exists","export const GET","uses supabaseServer","selects from build_plans table","filters by user","handles authentication"],"prompt_template":"SYSTEM: You are an expert Next.js API route developer. Your task is to implement an existing API endpoint.\nUSER: Modify the file `/user/src/app/api/plans/route.ts`.\nImplement the `GET` method for this route.\nThis endpoint will be responsible for fetching all `BuildPlan` records associated with the authenticated user from the Supabase database.\n\n**Data Model Context:**\nThe `BuildPlan` model from `/machine/manifest.json` has fields like `id`, `app_idea_id`, `plan_name`, `status`. The `AppIdea` model has `user_id` which links to the `User` model.\n\n**Functionality:**\n1.  Get the authenticated user's session and ID using `supabaseServer` from `/user/src/lib/supabase/server.ts`. If no user is authenticated, return a 401 Unauthorized response.\n2.  Query the `build_plans` table. You will need to perform a join or a subquery with the `app_ideas` table to filter results based on the authenticated `user_id` associated with the `app_idea_id` of each build plan.\n3.  Return a 200 OK response with the list of `BuildPlan`s. If no plans are found, return an an empty array.\n4.  Handle any errors during database interaction or authentication, returning appropriate 500 responses.\nEnsure the code is robust and follows Next.js API route conventions."}
{"id":"build-plan-api-03","title":"Create Build Plan item API endpoints (GET, PUT, DELETE /api/plans/[id])","description":"Create the Next.js API route file `/user/src/app/api/plans/[id]/route.ts`. Implement `GET` to retrieve a single `BuildPlan` by its ID, `PUT` to update it, and `DELETE` to delete it. All operations must verify that the requested `BuildPlan` belongs to the authenticated user.","expected_files":["/user/src/app/api/plans/[id]/route.ts"],"checks":["file exists","export const GET","export const PUT","export const DELETE","uses supabaseServer","handles dynamic id parameter","filters by user and plan id","handles authentication"],"prompt_template":"SYSTEM: You are an expert Next.js API route developer. Your task is to create a new API endpoint file for item-specific operations.\nUSER: Create the file `/user/src/app/api/plans/[id]/route.ts`.\nImplement the `GET`, `PUT`, and `DELETE` methods for this route.\nThis endpoint handles operations for a specific `BuildPlan` identified by its `id` parameter.\n\n**Data Model Context:**\nThe `BuildPlan` model from `/machine/manifest.json` has fields `id`, `app_idea_id`, `plan_name`, `status`. The `AppIdea` model has `user_id`.\n\n**Functionality:**\n1.  Get the authenticated user's session and ID using `supabaseServer` from `/user/src/lib/supabase/server.ts`. If no user is authenticated, return a 401 Unauthorized response.\n2.  Extract the `id` (BuildPlan ID) from the dynamic route parameters.\n3.  **Authentication and Authorization Check (common for all methods):** Before proceeding with any operation, verify that the `BuildPlan` with the given `id` exists and is associated with an `AppIdea` that belongs to the authenticated `user_id`. This can be done by joining `build_plans` with `app_ideas` and filtering by both `build_plan.id` and `app_ideas.user_id`. If not found or unauthorized, return a 404 Not Found or 403 Forbidden respectively.\n4.  **`GET` method**: Retrieve the `BuildPlan` and return a 200 OK response with its data.\n5.  **`PUT` method**: Extract fields to update (e.g., `plan_name`, `status`) from the request body. Update the `BuildPlan` record in the `build_plans` table by `id`. Return a 200 OK response with the updated `BuildPlan` data.\n6.  **`DELETE` method**: Delete the `BuildPlan` record from the `build_plans` table by `id`. Return a 204 No Content response.\n7.  Handle any errors during database interaction or authentication, returning appropriate 500 or 400 responses.\nEnsure the code is robust and follows Next.js API route conventions."}
{"id":"build-plan-api-04","title":"Create POST /api/plans/[id]/revisions endpoint to create a new Plan Revision","description":"Create the `POST` method in `/user/src/app/api/plans/[id]/revisions/route.ts` to create a new `PlanRevision` for a specific `BuildPlan`. This task also involves updating the `current_revision_id` of the parent `BuildPlan` to point to the newly created revision. Ensure user ownership of the parent `BuildPlan`.","expected_files":["/user/src/app/api/plans/[id]/revisions/route.ts"],"checks":["file exists","export const POST","uses supabaseServer","inserts into plan_revisions table","updates build_plans.current_revision_id","handles authentication"],"prompt_template":"SYSTEM: You are an expert Next.js API route developer. Your task is to create a new API endpoint.\nUSER: Create the file `/user/src/app/api/plans/[id]/revisions/route.ts`.\nImplement the `POST` method for this route.\nThis endpoint will be responsible for creating a new `PlanRevision` record for a specific `BuildPlan` (identified by the `id` parameter) in the Supabase database.\n\n**Data Model Context:**\nThe `BuildPlan` model from `/machine/manifest.json` has fields `id`, `current_revision_id`. The `PlanRevision` model from `/machine/manifest.json` has fields: `id`, `build_plan_id` (UUID, not null, references BuildPlan), `revision_number` (integer, not null), `plan_content` (jsonb, not null), `generated_by_ai` (boolean, not null), `editor_user_id` (UUID, references User), `created_at`, `updated_at`. The `AppIdea` model has `user_id`.\n\nThe request body for the `POST` method will contain:\n- `plan_content`: JSONB object representing the plan details.\n- `generated_by_ai`: Boolean, indicating if AI generated this revision.\n- `editor_user_id`: Optional UUID, if a user manually edited it.\n\n**Functionality:**\n1.  Get the authenticated user's session and ID using `supabaseServer` from `/user/src/lib/supabase/server.ts`. If no user is authenticated, return a 401 Unauthorized response.\n2.  Extract the `id` (BuildPlan ID) from the dynamic route parameters.\n3.  First, verify that the `BuildPlan` with the given `id` exists and belongs to the authenticated user (similar authorization check as in task build-plan-api-03). If not found or unauthorized, return 404 or 403.\n4.  Determine the next `revision_number` for this `BuildPlan`. This involves querying existing revisions for the highest `revision_number` for the given `build_plan_id` and incrementing it. If no revisions exist, the first `revision_number` should be 1.\n5.  Extract `plan_content`, `generated_by_ai`, and `editor_user_id` from the request body. Validate required fields.\n6.  Insert a new record into the `plan_revisions` table, linking it to the `build_plan_id` from the route parameter and including the determined `revision_number`.\n7.  **Crucially**: After successfully creating the revision, update the `current_revision_id` field of the parent `BuildPlan` record (in the `build_plans` table) to the `id` of the newly created `PlanRevision`.\n8.  Return a 201 Created response with the newly created `PlanRevision` data on success.\n9.  Handle any errors during database interaction or authentication, returning appropriate 500 or 400 responses.\nEnsure the code is robust and follows Next.js API route conventions."}
{"id":"build-plan-api-05","title":"Implement GET /api/plans/[id]/revisions endpoint to list Plan Revisions","description":"Add the `GET` method to `/user/src/app/api/plans/[id]/revisions/route.ts` to retrieve all `PlanRevision`s for a specific `BuildPlan` identified by the `id` parameter. Ensure user ownership of the parent `BuildPlan`.","expected_files":["/user/src/app/api/plans/[id]/revisions/route.ts"],"checks":["file exists","export const GET","uses supabaseServer","selects from plan_revisions table","filters by build_plan_id and user","handles authentication"],"prompt_template":"SYSTEM: You are an expert Next.js API route developer. Your task is to implement an existing API endpoint.\nUSER: Modify the file `/user/src/app/api/plans/[id]/revisions/route.ts`.\nImplement the `GET` method for this route.\nThis endpoint will be responsible for fetching all `PlanRevision` records for a specific `BuildPlan` (identified by the `id` parameter) from the Supabase database.\n\n**Data Model Context:**\nThe `PlanRevision` model from `/machine/manifest.json` has fields `id`, `build_plan_id`, `revision_number`, `plan_content`. The `BuildPlan` model has `app_idea_id`. The `AppIdea` model has `user_id`.\n\n**Functionality:**\n1.  Get the authenticated user's session and ID using `supabaseServer` from `/user/src/lib/supabase/server.ts`. If no user is authenticated, return a 401 Unauthorized response.\n2.  Extract the `id` (BuildPlan ID) from the dynamic route parameters.\n3.  First, verify that the `BuildPlan` with the given `id` exists and belongs to the authenticated user (similar authorization check as in task build-plan-api-03). If not found or unauthorized, return 404 or 403.\n4.  Query the `plan_revisions` table, filtering by `build_plan_id` matching the `id` from the route parameters. Order by `revision_number` in ascending order.\n5.  Return a 200 OK response with the list of `PlanRevision`s. If no revisions are found, return an empty array.\n6.  Handle any errors during database interaction or authentication, returning appropriate 500 responses.\nEnsure the code is robust and follows Next.js API route conventions."}