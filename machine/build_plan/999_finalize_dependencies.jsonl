{"id":"finalize-01","title":"Analyze Code and Generate package.json","description":"Scans all generated source code files to identify all imported packages, then generates a complete and accurate package.json file with all necessary dependencies and devDependencies.","expected_files":["/package.json"],"checks":["file exists","contains dependencies","contains devDependencies","is valid JSON"],"prompt_template":"You are a dependency management expert. Your task is to generate a comprehensive and accurate 'package.json' file for the 'Agent Architect AI' project based on the entire codebase generated so far. Follow these steps:\n\n1.  **Codebase Scan**: Read and analyze all files within the '/user/src' directory, as well as '/next.config.js', '/postcss.config.js', '/tailwind.config.js', and any files in '/user/src/tests/' (for unit and e2e testing frameworks).\n2.  **Identify Dependencies**: Extract all unique external package imports (e.g., `import X from 'package-name'`, `require('package-name')`) from the scanned files.\n3.  **Categorize Dependencies**: Separate identified packages into 'dependencies' (runtime packages essential for the application to run, such as 'next', 'react', 'react-dom', '@supabase/supabase-js', 'openai', 'zod', 'react-hook-form', 'lucide-react', '@radix-ui/react-slot', 'class-variance-authority', 'clsx', 'tailwind-merge') and 'devDependencies' (packages required for development, testing, building, linting, such as 'typescript', '@types/react', '@types/node', '@types/react-dom', 'eslint', 'eslint-config-next', 'postcss', 'tailwindcss', 'autoprefixer', 'jest', '@types/jest', '@testing-library/react', '@testing-library/jest-dom', 'cypress', 'prettier'). Ensure appropriate semantic versioning (e.g., '^X.Y.Z') for all packages.\n4.  **Define Scripts**: Include standard scripts relevant to a Next.js project with testing:\n    -   `\"dev\": \"next dev\"`\n    -   `\"build\": \"next build\"`\n    -   `\"start\": \"next start\"`\n    -   `\"lint\": \"next lint\"`\n    -   `\"test\": \"jest\"`\n    -   `\"cypress:open\": \"cypress open\"`\n    -   `\"prepare\": \"husky install\"` (if git hooks are desired for pre-commit linting/formatting)\n5.  **Construct package.json**: Create a complete 'package.json' file as a JSON string with the project name 'agent-architect-ai', version '0.1.0', and 'private: true'. Populate the 'scripts', 'dependencies', and 'devDependencies' sections with the identified and categorized packages and scripts.\n6.  **Output**: Overwrite the existing placeholder file at '/package.json' with the newly generated, accurate 'package.json' content. Respond with ONLY the JSON content of the 'package.json' file to be written to disk."}