{"id":"db-setup-01","title":"Initialize Supabase Client","description":"Create and configure the Supabase client instance for use in the Next.js frontend, typically for client-side data fetching and authentication interactions. This involves initializing the client with `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_ANON_KEY` environment variables.","expected_files":["user/src/lib/supabase/client.ts"],"checks":["file exists","contains createClient","exports supabase"],"prompt_template":"SYSTEM: You are an expert Next.js and Supabase developer. Read the project context and `manifest.json` to understand the stack. USER: Create the file `user/src/lib/supabase/client.ts`. In this file, import `createClient` from `@supabase/supabase-js`. Initialize a Supabase client instance using `process.env.NEXT_PUBLIC_SUPABASE_URL` and `process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY`. Export this client as `supabase` (lowercase) for use throughout the frontend application."}
{"id":"db-setup-02","title":"Initialize Supabase Server Client","description":"Create and configure the Supabase client instance suitable for server-side operations in Next.js API routes and server components. This client often uses a service role key or is configured to work with server-side cookies for user sessions. For this task, use `createClient` with `NEXT_PUBLIC_SUPABASE_URL` and `SUPABASE_SERVICE_ROLE_KEY` (or `SUPABASE_SECRET_KEY` if service role is not applicable yet) to ensure elevated permissions.","expected_files":["user/src/lib/supabase/server.ts"],"checks":["file exists","contains createClient","exports createServerSupabaseClient"],"prompt_template":"SYSTEM: You are an expert Next.js and Supabase developer. Read the project context and `manifest.json` to understand the stack. USER: Create the file `user/src/lib/supabase/server.ts`. This file should provide a function to get a server-side Supabase client. Import `createClient` from `@supabase/supabase-js`. Define a function, for example `createServerSupabaseClient`, that initializes a Supabase client using `process.env.NEXT_PUBLIC_SUPABASE_URL` and `process.env.SUPABASE_SERVICE_ROLE_KEY` (if available, otherwise use `process.env.SUPABASE_ANON_KEY` as a fallback for initial setup). Export this function. Ensure the `SUPABASE_SERVICE_ROLE_KEY` is referenced correctly, indicating it's for backend/API use."}
{"id":"db-setup-03","title":"Create User Table SQL Migration","description":"Generate the SQL migration script to create the 'users' table in PostgreSQL, following the 'User' data model specification in `manifest.json`. The table should include `id`, `email`, `password_hash`, `created_at`, and `updated_at` fields with their respective types, constraints, and default values.","expected_files":["supabase/migrations/001_create_users_table.sql"],"checks":["file exists","contains CREATE TABLE users","id uuid primary key","email text not null unique","password_hash text not null","created_at timestamp with time zone default now()","updated_at timestamp with time zone default now()"],"prompt_template":"SYSTEM: You are a database engineer. Your task is to generate a SQL migration file for a Supabase PostgreSQL database. Read the 'User' data model from the `dataModels` array in `manifest.json`. USER: Create a SQL migration file named `supabase/migrations/001_create_users_table.sql`. This file should contain a `CREATE TABLE` statement for the `users` table based on the 'User' model. Ensure all fields (`id`, `email`, `password_hash`, `created_at`, `updated_at`) have the correct types, `PRIMARY KEY`, `NOT NULL`, and `UNIQUE` constraints as specified. Use `DEFAULT gen_random_uuid()` for `id` and `DEFAULT now()` for `created_at` and `updated_at`. The `password_hash` field should be `TEXT NOT NULL`."}
{"id":"db-setup-04","title":"Create AppIdea Table SQL Migration","description":"Generate the SQL migration script to create the 'app_ideas' table in PostgreSQL, following the 'AppIdea' data model specification in `manifest.json`. This includes defining fields and a foreign key constraint referencing the 'users' table with `ON DELETE CASCADE`.","expected_files":["supabase/migrations/002_create_app_ideas_table.sql"],"checks":["file exists","contains CREATE TABLE app_ideas","user_id uuid references users(id) on delete cascade","created_at timestamp with time zone default now()","updated_at timestamp with time zone default now()"],"prompt_template":"SYSTEM: You are a database engineer. Your task is to generate a SQL migration file for a Supabase PostgreSQL database. Read the 'AppIdea' data model from the `dataModels` array in `manifest.json`. USER: Create a SQL migration file named `supabase/migrations/002_create_app_ideas_table.sql`. This file should contain a `CREATE TABLE` statement for the `app_ideas` table based on the 'AppIdea' model. Include all fields (`id`, `user_id`, `title`, `purpose`, `target_audience`, `core_features_desc`, `desired_tech_stack_desc`, `existing_resources_desc`, `created_at`, `updated_at`) with their specified types, constraints, and default values. Pay special attention to the `user_id` foreign key, ensuring it references `users(id)` and includes `ON DELETE CASCADE`."}
{"id":"db-setup-05","title":"Create BuildPlan Table SQL Migration","description":"Generate the SQL migration script to create the 'build_plans' table in PostgreSQL, following the 'BuildPlan' data model specification in `manifest.json`. This includes defining fields, a foreign key constraint referencing 'app_ideas' with `ON DELETE CASCADE`, and a unique constraint on `(app_idea_id, plan_name)`.","expected_files":["supabase/migrations/003_create_build_plans_table.sql"],"checks":["file exists","contains CREATE TABLE build_plans","app_idea_id uuid references app_ideas(id) on delete cascade","current_revision_id uuid references plan_revisions(id) on delete set null","UNIQUE (app_idea_id, plan_name)","created_at timestamp with time zone default now()","updated_at timestamp with time zone default now()"],"prompt_template":"SYSTEM: You are a database engineer. Your task is to generate a SQL migration file for a Supabase PostgreSQL database. Read the 'BuildPlan' data model from the `dataModels` array in `manifest.json`. USER: Create a SQL migration file named `supabase/migrations/003_create_build_plans_table.sql`. This file should contain a `CREATE TABLE` statement for the `build_plans` table based on the 'BuildPlan' model. Include all fields (`id`, `app_idea_id`, `plan_name`, `status`, `current_revision_id`, `created_at`, `updated_at`) with their specified types, constraints, and default values. Ensure `app_idea_id` references `app_ideas(id)` with `ON DELETE CASCADE`, and `current_revision_id` references `plan_revisions(id)` with `ON DELETE SET NULL`. Also, add the `UNIQUE (app_idea_id, plan_name)` table constraint."}
{"id":"db-setup-06","title":"Create PlanRevision Table SQL Migration","description":"Generate the SQL migration script to create the 'plan_revisions' table in PostgreSQL, following the 'PlanRevision' data model specification in `manifest.json`. This includes defining fields, foreign key constraints referencing 'build_plans' with `ON DELETE CASCADE` and 'users' with `ON DELETE SET NULL`, and a unique constraint on `(build_plan_id, revision_number)`.","expected_files":["supabase/migrations/004_create_plan_revisions_table.sql"],"checks":["file exists","contains CREATE TABLE plan_revisions","build_plan_id uuid references build_plans(id) on delete cascade","editor_user_id uuid references users(id) on delete set null","plan_content jsonb not null","UNIQUE (build_plan_id, revision_number)","created_at timestamp with time zone default now()","updated_at timestamp with time zone default now()"],"prompt_template":"SYSTEM: You are a database engineer. Your task is to generate a SQL migration file for a Supabase PostgreSQL database. Read the 'PlanRevision' data model from the `dataModels` array in `manifest.json`. USER: Create a SQL migration file named `supabase/migrations/004_create_plan_revisions_table.sql`. This file should contain a `CREATE TABLE` statement for the `plan_revisions` table based on the 'PlanRevision' model. Include all fields (`id`, `build_plan_id`, `revision_number`, `plan_content`, `generated_by_ai`, `editor_user_id`, `created_at`, `updated_at`) with their specified types, constraints, and default values. Ensure `build_plan_id` references `build_plans(id)` with `ON DELETE CASCADE`, and `editor_user_id` references `users(id)` with `ON DELETE SET NULL`. The `plan_content` field should be `JSONB NOT NULL`. Also, add the `UNIQUE (build_plan_id, revision_number)` table constraint."}