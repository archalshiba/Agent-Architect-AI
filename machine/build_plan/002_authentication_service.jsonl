{"id":"auth-01","title":"Initialize Supabase Client-side SDK","description":"Create and configure the Supabase client for browser-side interactions in a client component or client-side hook, ensuring it uses environment variables for Supabase URL and anonymous key.","expected_files":["user/src/lib/supabase/client.ts"],"checks":["file exists","contains createClientComponentClient","uses NEXT_PUBLIC_SUPABASE_URL","uses NEXT_PUBLIC_SUPABASE_ANON_KEY"],"prompt_template":"SYSTEM: You are an expert Next.js and Supabase developer. Read the project configuration from `/machine/manifest.json`. USER: Create the file `user/src/lib/supabase/client.ts`. Initialize the Supabase client for client-side usage using `createClientComponentClient` from `@supabase/auth-helpers-nextjs`. Ensure it reads `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_ANON_KEY` from environment variables, which must be prefixed with `NEXT_PUBLIC_` for client-side access. Export this client for use in other client-side modules."}
{"id":"auth-02","title":"Create Supabase Server Client Utility","description":"Create and configure a utility in `user/src/lib/supabase/server.ts` to provide a Supabase client instance suitable for server-side environments like Next.js API routes and Server Components. This utility will correctly handle cookies for session management.","expected_files":["user/src/lib/supabase/server.ts"],"checks":["file exists","exports a function like getSupabaseRouteHandlerClient","uses createRouteHandlerClient","imports cookies from next/headers"],"prompt_template":"SYSTEM: You are an expert Next.js and Supabase developer. Read the project configuration from `/machine/manifest.json`. USER: Create the file `user/src/lib/supabase/server.ts`. Export a function named `getSupabaseRouteHandlerClient` that returns a Supabase client instance. This function should use `createRouteHandlerClient` from `@supabase/auth-helpers-nextjs` and receive the `cookies()` function from `next/headers` to manage the session. Ensure it reads `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_ANON_KEY` from environment variables for initialization."}
{"id":"auth-03","title":"Implement Signup API Route","description":"Implement the `POST /api/auth/signup` API route to handle new user registrations using the Supabase server client. It should take email and password, call Supabase's `auth.signUp`, and return an appropriate JSON response.","expected_files":["user/src/app/api/auth/signup/route.ts"],"checks":["file exists","contains POST function","imports getSupabaseRouteHandlerClient","imports cookies from next/headers","calls supabase.auth.signUp"],"prompt_template":"SYSTEM: You are an expert Next.js developer building an authentication service. Read the project configuration from `/machine/manifest.json`. You have already set up the server-side Supabase client utility in `user/src/lib/supabase/server.ts`. USER: Create the file `user/src/app/api/auth/signup/route.ts`. Implement a `POST` API route that handles user registration. It should: 1. Import `cookies` from `next/headers` and `getSupabaseRouteHandlerClient` from `user/src/lib/supabase/server.ts`. 2. Extract `email` and `password` from the request body. 3. Initialize the Supabase server client by calling `getSupabaseRouteHandlerClient(cookies())`. 4. Call `supabase.auth.signUp({ email, password, options: { emailRedirectTo: `${process.env.NEXT_PUBLIC_BASE_URL}/auth/callback` } })` to register the user. 5. Return a JSON response indicating success or failure, including error messages from Supabase if any. Ensure proper error handling and status codes."}
{"id":"auth-04","title":"Implement Login API Route","description":"Implement the `POST /api/auth/login` API route to handle user logins using the Supabase server client. It should take email and password, call Supabase's `auth.signInWithPassword`, and return an appropriate JSON response.","expected_files":["user/src/app/api/auth/login/route.ts"],"checks":["file exists","contains POST function","imports getSupabaseRouteHandlerClient","imports cookies from next/headers","calls supabase.auth.signInWithPassword"],"prompt_template":"SYSTEM: You are an expert Next.js developer building an authentication service. Read the project configuration from `/machine/manifest.json`. You have already set up the server-side Supabase client utility in `user/src/lib/supabase/server.ts`. USER: Create the file `user/src/app/api/auth/login/route.ts`. Implement a `POST` API route that handles user login. It should: 1. Import `cookies` from `next/headers` and `getSupabaseRouteHandlerClient` from `user/src/lib/supabase/server.ts`. 2. Extract `email` and `password` from the request body. 3. Initialize the Supabase server client by calling `getSupabaseRouteHandlerClient(cookies())`. 4. Call `supabase.auth.signInWithPassword({ email, password })`. 5. Return a JSON response indicating success or failure, including error messages from Supabase if any. Ensure proper error handling and status codes."}
{"id":"auth-05","title":"Implement Logout API Route","description":"Implement the `POST /api/auth/logout` API route to handle user logouts using the Supabase server client. It should call Supabase's `auth.signOut` and return a success response.","expected_files":["user/src/app/api/auth/logout/route.ts"],"checks":["file exists","contains POST function","imports getSupabaseRouteHandlerClient","imports cookies from next/headers","calls supabase.auth.signOut"],"prompt_template":"SYSTEM: You are an expert Next.js developer building an authentication service. Read the project configuration from `/machine/manifest.json`. You have already set up the server-side Supabase client utility in `user/src/lib/supabase/server.ts`. USER: Create the file `user/src/app/api/auth/logout/route.ts`. Implement a `POST` API route that handles user logout. It should: 1. Import `cookies` from `next/headers` and `getSupabaseRouteHandlerClient` from `user/src/lib/supabase/server.ts`. 2. Initialize the Supabase server client by calling `getSupabaseRouteHandlerClient(cookies())`. 3. Call `supabase.auth.signOut()`. 4. Return a JSON response indicating success. Ensure proper error handling and status codes."}
{"id":"auth-06","title":"Implement Session API Route","description":"Implement the `GET /api/auth/session` API route to retrieve the current user's session information using the Supabase server client.","expected_files":["user/src/app/api/auth/session/route.ts"],"checks":["file exists","contains GET function","imports getSupabaseRouteHandlerClient","imports cookies from next/headers","calls supabase.auth.getSession"],"prompt_template":"SYSTEM: You are an expert Next.js developer building an authentication service. Read the project configuration from `/machine/manifest.json`. You have already set up the server-side Supabase client utility in `user/src/lib/supabase/server.ts`. USER: Create the file `user/src/app/api/auth/session/route.ts`. Implement a `GET` API route that retrieves the current user's session. It should: 1. Import `cookies` from `next/headers` and `getSupabaseRouteHandlerClient` from `user/src/lib/supabase/server.ts`. 2. Initialize the Supabase server client by calling `getSupabaseRouteHandlerClient(cookies())`. 3. Call `supabase.auth.getSession()`. 4. Return a JSON response containing the session data or an empty object if no session is found. Ensure proper error handling and status codes."}
{"id":"auth-07","title":"Create `useAuth` React Hook for Client-side Auth State","description":"Develop a custom React hook `useAuth` in `user/src/hooks/useAuth.ts` to manage and expose the client-side authentication state (user, session) and provide convenience functions (`signIn`, `signUp`, `signOut`) that interact with the Supabase client and the auth API routes. The hook should listen for Supabase auth state changes.","expected_files":["user/src/hooks/useAuth.ts"],"checks":["file exists","exports useAuth function","uses useEffect","subscribes to onAuthStateChange","provides signIn, signUp, signOut functions"],"prompt_template":"SYSTEM: You are an expert React and Next.js developer. Read the project configuration from `/machine/manifest.json`. You have already set up the client-side Supabase client in `user/src/lib/supabase/client.ts` and the auth API routes in `user/src/app/api/auth/`. USER: Create the file `user/src/hooks/useAuth.ts`. Implement a custom React hook named `useAuth`. This hook should: 1. Import the Supabase client from `user/src/lib/supabase/client.ts`. 2. Manage the current user (`User | null`) and session (`Session | null`) state using `useState`. 3. Use `useEffect` to subscribe to Supabase's `onAuthStateChange` event (via `supabase.auth.onAuthStateChange`) to update the user and session state whenever authentication status changes. Handle initial loading of session. 4. Provide helper functions: `signIn(email, password)` and `signUp(email, password)` that send `POST` requests to `/api/auth/login` and `/api/auth/signup` respectively, and `signOut()` that sends a `POST` request to `/api/auth/logout`. These functions should handle loading states and potential errors. 5. Return the current user, session, a loading state, and the helper functions. Ensure it handles redirection after successful login/signup (e.g., to the dashboard)."}