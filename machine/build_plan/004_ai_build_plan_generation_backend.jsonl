{"id":"ai-gen-001","title":"Initialize OpenAI Client","description":"Create a utility file to initialize and export the OpenAI API client using the API key from environment variables. This will be used by other services to interact with OpenAI.","expected_files":["user/src/lib/openai/index.ts"],"checks":["file exists","exports an OpenAI client instance","uses process.env.OPENAI_API_KEY"],"prompt_template":"SYSTEM: You are an expert TypeScript developer. Your task is to create a utility file to initialize the OpenAI API client. USER: Create the file 'user/src/lib/openai/index.ts'. It should:\n1.  Import 'OpenAI' from 'openai'.\n2.  Check for the 'OPENAI_API_KEY' environment variable. If it's not set, throw an error.\n3.  Initialize a new OpenAI client instance using this API key.\n4.  Export the initialized client as the default export.\nMake sure the code is clean, production-ready, and handles the environment variable gracefully."}
{"id":"ai-gen-002","title":"Develop AI Prompt Construction Logic","description":"Create a service function that dynamically constructs a detailed prompt for the OpenAI API. This prompt will instruct the AI to generate a structured build plan in JSON format based on the user's App Idea details. The prompt should specify the desired output schema clearly.","expected_files":["user/src/lib/ai/promptBuilder.ts"],"checks":["file exists","exports a function 'buildPlanGenerationPrompt'","function takes an AppIdea object","returns a string","includes JSON schema for output"],"prompt_template":"SYSTEM: You are an expert in crafting prompts for AI models, specifically for generating software project plans. USER: Create the file 'user/src/lib/ai/promptBuilder.ts'.\nIt should export an asynchronous function named 'buildPlanGenerationPrompt' that takes an 'AppIdea' object as input. The 'AppIdea' object will have the following structure (from /machine/manifest.json):\n```typescript\ninterface AppIdea {\n  id: string;\n  user_id: string;\n  title: string;\n  purpose?: string;\n  target_audience?: string;\n  core_features_desc?: string;\n  desired_tech_stack_desc?: string;\n  existing_resources_desc?: string;\n  created_at: string;\n  updated_at: string;\n}\n```\n\nThe function should return a comprehensive string that serves as a prompt for the OpenAI API. This prompt must clearly instruct the AI to generate a structured, multi-phase build plan in JSON format. The JSON output should conform to the following schema:\n\n```json\n{\n  \"plan_name\": \"string\", // A concise name for the generated plan\n  \"phases\": [\n    {\n      \"id\": \"string\", // Unique ID for the phase (e.g., \"phase-001\")\n      \"title\": \"string\", // Title of the phase (e.g., \"Project Setup\")\n      \"description\": \"string\", // Brief description of the phase\n      \"tasks\": [\n        {\n          \"id\": \"string\", // Unique ID for the task (e.g., \"task-001-001\")\n          \"title\": \"string\", // Title of the task (e.g., \"Initialize Next.js Project\")\n          \"description\": \"string\", // Detailed description of the task\n          \"technologies\": [\"string\"], // Array of suggested technologies (e.g., [\"Next.js\", \"Tailwind CSS\"])\n          \"suitable_for_ai_agent\": \"boolean\", // True if suitable for AI coding agent, false otherwise\n          \"no_code_hint\": \"string | null\", // Specific hint for no-code platforms, or null\n          \"estimated_effort\": \"string\", // e.g., \"low\", \"medium\", \"high\", \"very-high\"\n          \"dependencies\": [\"string\"] // Array of task IDs this task depends on\n        }\n      ]\n    }\n  ]\n}\n```\n\nThe prompt should incorporate the 'AppIdea' details to tailor the plan. Emphasize that the AI must ONLY return the JSON object, not any conversational text or code fences. Ensure the prompt guides the AI to generate realistic and actionable tasks, clearly differentiating between AI agent suitability and no-code hints. The plan should be comprehensive, covering frontend, backend, database, and infrastructure aspects as relevant to the idea. Limit the plan to a reasonable number of phases and tasks for an MVP."}
{"id":"ai-gen-003","title":"Develop AI Plan Generation Orchestration Service","description":"Create a service function that orchestrates the AI plan generation process. This service will take an App Idea, build a prompt using the prompt builder, call the OpenAI API, handle the API response, validate the JSON output, and return the structured build plan content.","expected_files":["user/src/lib/ai/planGenerator.ts"],"checks":["file exists","exports a function 'generateBuildPlan'","takes AppIdea as input","uses openai client and promptBuilder","returns structured JSON plan_content"],"prompt_template":"SYSTEM: You are an expert TypeScript developer specializing in integrating AI services. Your task is to create a core service for generating build plans. USER: Create the file 'user/src/lib/ai/planGenerator.ts'.\nIt should export an asynchronous function named 'generateBuildPlan' that takes an 'AppIdea' object as its sole argument (use the same interface as in the promptBuilder task).\n\nThis function should:\n1.  Import the initialized OpenAI client from 'user/src/lib/openai/index.ts'.\n2.  Import the 'buildPlanGenerationPrompt' function from 'user/src/lib/ai/promptBuilder.ts'.\n3.  Call 'buildPlanGenerationPrompt' with the provided 'AppIdea' to construct the AI prompt.\n4.  Make a call to the OpenAI API (e.g., `client.chat.completions.create`) using the generated prompt. Use a suitable model (e.g., 'gpt-4-turbo-preview' or 'gpt-3.5-turbo').\n5.  Extract the generated JSON string from the AI's response.\n6.  Parse the JSON string into a JavaScript object. Implement robust error handling for JSON parsing failures.\n7.  Return the parsed JSON object, which represents the structured 'plan_content'.\n8.  Include proper error handling for API calls and any other potential issues."}
{"id":"ai-gen-004","title":"Implement API Route for Build Plan Generation and Storage","description":"Develop the Next.js API route 'POST /api/ai/generate-plan'. This route will be responsible for receiving an app_idea_id, fetching the AppIdea from the database, invoking the AI plan generation service, and then persisting the generated build plan and its first revision into the Supabase database.","expected_files":["user/src/app/api/ai/generate-plan/route.ts"],"checks":["file exists","exports POST handler","fetches AppIdea from DB","calls generateBuildPlan","creates/updates BuildPlan in DB","creates PlanRevision in DB","returns a JSON response"],"prompt_template":"SYSTEM: You are an expert Next.js backend developer. Your task is to implement an API route to trigger AI build plan generation and save it to the database. USER: Create the file 'user/src/app/api/ai/generate-plan/route.ts'.\nThis file should:\n1.  Import necessary utilities:\n    *   The server-side Supabase client from 'user/src/lib/supabase/server.ts'.\n    *   The 'generateBuildPlan' function from 'user/src/lib/ai/planGenerator.ts'.\n    *   Next.js 'NextRequest' and 'NextResponse'.\n2.  Define an asynchronous 'POST' handler function.\n3.  Inside the POST handler:\n    *   Get the Supabase client instance.\n    *   Parse the request body to extract 'app_idea_id'.\n    *   Fetch the 'AppIdea' details from the 'app_ideas' table using the provided 'app_idea_id'. If not found, return a 404 error.\n    *   Call 'generateBuildPlan' with the fetched 'AppIdea' object to get the structured 'plan_content'.\n    *   **Database Interaction**:\n        *   Check if a 'BuildPlan' already exists for this 'app_idea_id'.\n        *   If a 'BuildPlan' exists, update its `updated_at` and potentially `current_revision_id` if a new revision is created.\n        *   If no 'BuildPlan' exists, insert a new record into the 'build_plans' table, setting 'app_idea_id', 'plan_name' (from the generated plan_content), and 'status' to 'generated'.\n        *   After ensuring a 'BuildPlan' exists (or is created), insert a new record into the 'plan_revisions' table. This new revision should link to the 'build_plan_id', have `revision_number` (e.g., 1 for the first, increment for subsequent ones), `plan_content` (the JSON generated by AI), `generated_by_ai: true`, and `editor_user_id: null` (as it's AI generated).\n        *   Update the `current_revision_id` in the `BuildPlan` record to point to the newly created `PlanRevision`.\n    *   Return a `NextResponse` with the newly created/updated `BuildPlan` and `PlanRevision` data in JSON format, with a 200 status code.\n    *   Implement comprehensive error handling (e.g., try-catch blocks) to catch database errors, AI generation errors, and return appropriate HTTP status codes (e.g., 500 for internal server errors, 400 for bad requests)."}