{"id":"auth-pages-01","title":"Create reusable AuthForm component","description":"Develop a client-side React component `AuthForm` in `src/components/AuthForm.tsx` that can handle both login and signup states. It should adhere to the specification provided in `manifest.json` under `uiSchema.pages[id='auth-page'].components[id='auth-form']`. This includes email, password fields (and confirm password for signup), a submit button, and a toggle/link to switch between modes. For the login state, include a 'Forgot Password' link as a placeholder for a future dedicated page. Implement robust client-side form validation and use Tailwind CSS for styling. The component must also implement client-side data fetching logic to interact with the Next.js API route `POST /api/auth` for user login and signup. For login, send a JSON body like `{ email, password, type: 'login' }`. For signup, send `{ email, password, type: 'signup' }`. Handle success (e.g., redirect to '/dashboard') and display error messages.","expected_files":["src/components/AuthForm.tsx"],"checks":["file exists","export default AuthForm","component handles 'login' and 'signup' states via props or internal state","includes email, password, confirm password (signup only) fields","includes submit button","includes toggle for login/signup states","includes a 'Forgot Password' link in login state","uses client-side validation","uses Tailwind CSS for styling","implements fetch or equivalent for POST /api/auth","includes 'use client' directive"],"prompt_template":"SYSTEM: You are an expert React and Next.js developer, skilled in building reusable components with Tailwind CSS and integrating with backend APIs. Your task is to create a client-side React component `AuthForm.tsx` based on the provided specifications. USER: Create the `AuthForm.tsx` component in `src/components/AuthForm.tsx`. This component should be a clean, centered card-style form that can switch between 'Login' and 'Sign Up' states. For the 'Login' state, include email and password fields, a 'Forgot Password' link (as a placeholder, it doesn't need to be functional yet), and a submit button. For the 'Sign Up' state, include email, password, and confirm password fields, and a submit button. Include a clear toggle or link to switch between 'Login' and 'Sign Up' states. Use robust client-side form validation (e.g., ensuring email format, password strength, matching passwords for signup). Style the component using Tailwind CSS to match a modern, professional aesthetic. Implement the client-side data fetching logic to send form data to the Next.js API route `POST /api/auth`. When in 'Login' state, send a JSON body like `{ email: 'user@example.com', password: 'securepassword', type: 'login' }`. When in 'Sign Up' state, send `{ email: 'newuser@example.com', password: 'newsecurepassword', type: 'signup' }`. Upon successful authentication (login or signup), redirect the user to the `/dashboard` page using `next/navigation`'s `useRouter`. Display appropriate error messages for failed attempts (e.g., invalid credentials, registration error) to the user. Ensure the component uses the `\"use client\"` directive at the top of the file. Reference the component specification from `manifest.json` for styling and feature details: {\"id\":\"auth-form\",\"name\":\"Authentication Form\",\"enabled\":true,\"specification\":\"Create a clean, centered card-style form component that can switch between 'Login' and 'Sign Up' states. For Login, include email and password fields, a 'Forgot Password' link, and a submit button. For Sign Up, include email, password, password confirmation fields, and a submit button. Include a clear toggle or link to switch between Login and Sign Up. Use robust form validation and Tailwind CSS for styling.\"}"}
{"id":"auth-pages-02","title":"Create Login Page","description":"Create the Next.js page component for the login route at `src/app/auth/login/page.tsx`. This page should import and render the `AuthForm` component, specifically configured for the 'login' state. The page itself should be minimal, acting primarily as a container for the `AuthForm` component and applying the `\"use client\"` directive if necessary.","expected_files":["src/app/auth/login/page.tsx"],"checks":["file exists","imports AuthForm component","renders AuthForm component","configures AuthForm for 'login' state (e.g., via a prop like `initialState='login'`)","includes 'use client' directive"],"prompt_template":"SYSTEM: You are an expert Next.js developer. Your task is to create a new page component that integrates an existing shared component. USER: Create the Next.js page component `page.tsx` inside `src/app/auth/login/`. This page should be client-side and include the `\"use client\"` directive. It needs to import the `AuthForm` component from `src/components/AuthForm.tsx`. Render the `AuthForm` component within this page, passing any necessary props to configure it for the 'login' state (e.g., `<AuthForm initialState=\"login\" />`). The page should be minimal and correctly set up the `AuthForm` for login. Do not include any layout or header/footer elements, assume the root layout will handle that. The content of this file should only be the page component definition."}
{"id":"auth-pages-03","title":"Create Sign Up Page","description":"Create the Next.js page component for the signup route at `src/app/auth/signup/page.tsx`. This page should import and render the `AuthForm` component, specifically configured for the 'signup' state. The page itself should be minimal, acting primarily as a container for the `AuthForm` component and applying the `\"use client\"` directive if necessary.","expected_files":["src/app/auth/signup/page.tsx"],"checks":["file exists","imports AuthForm component","renders AuthForm component","configures AuthForm for 'signup' state (e.g., via a prop like `initialState='signup'`)","includes 'use client' directive"],"prompt_template":"SYSTEM: You are an expert Next.js developer. Your task is to create a new page component that integrates an existing shared component. USER: Create the Next.js page component `page.tsx` inside `src/app/auth/signup/`. This page should be client-side and include the `\"use client\"` directive. It needs to import the `AuthForm` component from `src/components/AuthForm.tsx`. Render the `AuthForm` component within this page, passing any necessary props to configure it for the 'signup' state (e.g., `<AuthForm initialState=\"signup\" />`). The page should be minimal and correctly set up the `AuthForm` for signup. Do not include any layout or header/footer elements, assume the root layout will handle that. The content of this file should only be the page component definition."}