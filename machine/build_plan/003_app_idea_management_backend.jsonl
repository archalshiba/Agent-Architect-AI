{"id":"app-idea-backend-001","title":"Setup App Idea Collection API Route File","description":"Create the API route file `user/src/app/api/ideas/route.ts` to handle creating new app ideas (POST) and listing all app ideas for the current user (GET). Include necessary imports for Supabase server client and Next.js `NextResponse`.","expected_files":["user/src/app/api/ideas/route.ts"],"checks":["file exists","contains 'import { NextResponse } from \"next/server\";'","contains 'import { createServerComponentClient } from \"@supabase/auth-helpers-nextjs\";'","contains 'import { cookies } from \"next/headers\";'"],"prompt_template":"SYSTEM: You are an expert Next.js backend developer. Your task is to set up the API route file for managing app ideas. USER: Create the file `user/src/app/api/ideas/route.ts`. This file will contain functions for handling POST and GET requests. Include the necessary imports for `NextResponse` from 'next/server', `createServerComponentClient` from '@supabase/auth-helpers-nextjs', and `cookies` from 'next/headers'. Do not implement the POST or GET logic yet, just set up the file with imports."}
{"id":"app-idea-backend-002","title":"Implement POST /api/ideas for creating App Ideas","description":"Add the `POST` function to `user/src/app/api/ideas/route.ts`. This function should: get the authenticated user's ID using Supabase, return a 401 if no user session, parse and validate the request body (ensuring 'title' is present), insert a new record into the `app_ideas` table with the `user_id` and provided data, and return the created `AppIdea` with a 201 status, or an error.","expected_files":["user/src/app/api/ideas/route.ts"],"checks":["file exists","contains 'export async function POST('","handles user authentication","inserts into 'app_ideas' table","returns 201 status on success"],"prompt_template":"SYSTEM: You are an expert Next.js backend developer. Your task is to implement the POST handler for the `/api/ideas` route. USER: Modify the file `user/src/app/api/ideas/route.ts`. Implement the `POST` async function. The function should perform the following steps:\n1. Initialize the Supabase client using `createServerComponentClient({ cookies });`.\n2. Get the user session and extract `user_id`. If no session, return a `NextResponse.json` with a 401 status and an error message.\n3. Parse the request body using `await request.json()`.\n4. Validate the input: The `title` field is 'not null' according to the `AppIdea` data model. Return a 400 error if `title` is missing.\n5. Insert the new app idea into the `app_ideas` table using the Supabase client. Include `user_id` from the session and all other fields from the request body. The `AppIdea` data model is:\n```json\n{\"modelName\":\"AppIdea\",\"fields\":[{\"name\":\"id\",\"type\":\"uuid\",\"constraints\":[\"primary key\",\"default gen_random_uuid()\"]},{\"name\":\"user_id\",\"type\":\"uuid\",\"constraints\":[\"not null\",\"references User(id) on delete cascade\"]},{\"name\":\"title\",\"type\":\"text\",\"constraints\":[\"not null\"]},{\"name\":\"purpose\",\"type\":\"text\",\"constraints\":[]},{\"name\":\"target_audience\",\"type\":\"text\",\"constraints\":[]},{\"name\":\"core_features_desc\",\"type\":\"text\",\"constraints\":[]},{\"name\":\"desired_tech_stack_desc\",\"type\":\"text\",\"constraints\":[]},{\"name\":\"existing_resources_desc\",\"type\":\"text\",\"constraints\":[]},{\"name\":\"created_at\",\"type\":\"timestamp with time zone\",\"constraints\":[\"not null\",\"default now()\"]},{\"name\":\"updated_at\",\"type\":\"timestamp with time zone\",\"constraints\":[\"not null\",\"default now()\"]}],\"tableConstraints\":[]}\n```\n6. Return a `NextResponse.json` with the created `AppIdea` object and a 201 status code on success. Handle potential database errors by returning a 500 status."}
{"id":"app-idea-backend-003","title":"Implement GET /api/ideas for listing App Ideas","description":"Add the `GET` function to `user/src/app/api/ideas/route.ts`. This function should: get the authenticated user's ID, return a 401 if no user session, query the `app_ideas` table to fetch all ideas belonging to the authenticated `user_id`, and return the list of `AppIdea` objects with a 200 status, or an empty array if none.","expected_files":["user/src/app/api/ideas/route.ts"],"checks":["file exists","contains 'export async function GET('","fetches from 'app_ideas' table by user_id","returns 200 status on success"],"prompt_template":"SYSTEM: You are an expert Next.js backend developer. Your task is to implement the GET handler for the `/api/ideas` route. USER: Modify the file `user/src/app/api/ideas/route.ts`. Implement the `GET` async function. The function should perform the following steps:\n1. Initialize the Supabase client using `createServerComponentClient({ cookies });`.\n2. Get the user session and extract `user_id`. If no session, return a `NextResponse.json` with a 401 status and an error message.\n3. Query the `app_ideas` table to `select('*')` all app ideas where `user_id` matches the authenticated user's ID.\n4. Return a `NextResponse.json` with the array of `AppIdea` objects (or an empty array if no ideas found) and a 200 status code on success. Handle potential database errors by returning a 500 status."}
{"id":"app-idea-backend-004","title":"Setup App Idea Item API Route File","description":"Create the API route file `user/src/app/api/ideas/[id]/route.ts` to handle fetching (GET), updating (PUT), and deleting (DELETE) a specific app idea by its ID. Include necessary imports for Supabase server client and Next.js `NextResponse`.","expected_files":["user/src/app/api/ideas/[id]/route.ts"],"checks":["file exists","contains 'import { NextResponse } from \"next/server\";'","contains 'import { createServerComponentClient } from \"@supabase/auth-helpers-nextjs\";'","contains 'import { cookies } from \"next/headers\";'"],"prompt_template":"SYSTEM: You are an expert Next.js backend developer. Your task is to set up the dynamic API route file for managing a single app idea. USER: Create the file `user/src/app/api/ideas/[id]/route.ts`. This file will contain functions for handling GET, PUT, and DELETE requests for a specific idea identified by its `id`. Include the necessary imports for `NextResponse` from 'next/server', `createServerComponentClient` from '@supabase/auth-helpers-nextjs', and `cookies` from 'next/headers'. Do not implement the GET, PUT, or DELETE logic yet, just set up the file with imports and define the `Params` interface for `id`."}
{"id":"app-idea-backend-005","title":"Implement GET /api/ideas/[id] for fetching a single App Idea","description":"Add the `GET` function to `user/src/app/api/ideas/[id]/route.ts`. This function should: get the authenticated user's ID, return a 401 if no user session, extract the `id` parameter from `params`, query the `app_ideas` table for the idea with the given `id` and `user_id`, and return the `AppIdea` object with a 200 status, or a 404 if not found/authorized.","expected_files":["user/src/app/api/ideas/[id]/route.ts"],"checks":["file exists","contains 'export async function GET('","extracts 'id' from params","fetches single idea by id and user_id","returns 200/404 status"],"prompt_template":"SYSTEM: You are an expert Next.js backend developer. Your task is to implement the GET handler for the `/api/ideas/[id]` route. USER: Modify the file `user/src/app/api/ideas/[id]/route.ts`. Implement the `GET` async function, which takes `request` and an object `{ params: { id: string } }` as arguments. The function should perform the following steps:\n1. Initialize the Supabase client using `createServerComponentClient({ cookies });`.\n2. Get the user session and extract `user_id`. If no session, return a `NextResponse.json` with a 401 status and an error message.\n3. Extract the `id` from `params.id`.\n4. Query the `app_ideas` table to `select('*')` the app idea where `id` matches the extracted `id` and `user_id` matches the authenticated user's ID.\n5. If the idea is found, return a `NextResponse.json` with the `AppIdea` object and a 200 status code. If not found or not authorized for the user, return a `NextResponse.json` with a 404 status and an error message. Handle potential database errors by returning a 500 status."}
{"id":"app-idea-backend-006","title":"Implement PUT /api/ideas/[id] for updating an App Idea","description":"Add the `PUT` function to `user/src/app/api/ideas/[id]/route.ts`. This function should: get the authenticated user's ID, return a 401 if no user session, extract the `id` parameter, parse the request body for update fields, update the `app_ideas` table for the record with the given `id` and `user_id`, and return the updated `AppIdea` object with a 200 status, or 404/400 for errors.","expected_files":["user/src/app/api/ideas/[id]/route.ts"],"checks":["file exists","contains 'export async function PUT('","extracts 'id' from params","updates 'app_ideas' table by id and user_id","returns 200/404/400 status"],"prompt_template":"SYSTEM: You are an expert Next.js backend developer. Your task is to implement the PUT handler for the `/api/ideas/[id]` route. USER: Modify the file `user/src/app/api/ideas/[id]/route.ts`. Implement the `PUT` async function, which takes `request` and an object `{ params: { id: string } }` as arguments. The function should perform the following steps:\n1. Initialize the Supabase client using `createServerComponentClient({ cookies });`.\n2. Get the user session and extract `user_id`. If no session, return a `NextResponse.json` with a 401 status and an error message.\n3. Extract the `id` from `params.id`.\n4. Parse the request body using `await request.json()` to get the fields to update. The `AppIdea` data model is:\n```json\n{\"modelName\":\"AppIdea\",\"fields\":[{\"name\":\"id\",\"type\":\"uuid\",\"constraints\":[\"primary key\",\"default gen_random_uuid()\"]},{\"name\":\"user_id\",\"type\":\"uuid\",\"constraints\":[\"not null\",\"references User(id) on delete cascade\"]},{\"name\":\"title\",\"type\":\"text\",\"constraints\":[\"not null\"]},{\"name\":\"purpose\",\"type\":\"text\",\"constraints\":[]},{\"name\":\"target_audience\",\"type\":\"text\",\"constraints\":[]},{\"name\":\"core_features_desc\",\"type\":\"text\",\"constraints\":[]},{\"name\":\"desired_tech_stack_desc\",\"type\":\"text\",\"constraints\":[]},{\"name\":\"existing_resources_desc\",\"type\":\"text\",\"constraints\":[]},{\"name\":\"created_at\",\"type\":\"timestamp with time zone\",\"constraints\":[\"not null\",\"default now()\"]},{\"name\":\"updated_at\",\"type\":\"timestamp with time zone\",\"constraints\":[\"not null\",\"default now()\"]}],\"tableConstraints\":[]}\n```\n5. Update the `app_ideas` table: `update(updates).eq('id', id).eq('user_id', user_id)`. Ensure `updated_at` is set to `now()`. Return a 400 if no update data is provided.\n6. If the update is successful and a record was found, return a `NextResponse.json` with the updated `AppIdea` object and a 200 status code. If no record was found or authorized, return a `NextResponse.json` with a 404 status. Handle potential database errors by returning a 500 status."}
{"id":"app-idea-backend-007","title":"Implement DELETE /api/ideas/[id] for deleting an App Idea","description":"Add the `DELETE` function to `user/src/app/api/ideas/[id]/route.ts`. This function should: get the authenticated user's ID, return a 401 if no user session, extract the `id` parameter, delete the record from the `app_ideas` table with the given `id` and `user_id`, and return a 204 No Content status on successful deletion, or 404 if not found/authorized.","expected_files":["user/src/app/api/ideas/[id]/route.ts"],"checks":["file exists","contains 'export async function DELETE('","extracts 'id' from params","deletes from 'app_ideas' table by id and user_id","returns 204/404 status"],"prompt_template":"SYSTEM: You are an expert Next.js backend developer. Your task is to implement the DELETE handler for the `/api/ideas/[id]` route. USER: Modify the file `user/src/app/api/ideas/[id]/route.ts`. Implement the `DELETE` async function, which takes `request` and an object `{ params: { id: string } }` as arguments. The function should perform the following steps:\n1. Initialize the Supabase client using `createServerComponentClient({ cookies });`.\n2. Get the user session and extract `user_id`. If no session, return a `NextResponse.json` with a 401 status and an error message.\n3. Extract the `id` from `params.id`.\n4. Delete the record from the `app_ideas` table where `id` matches the extracted `id` and `user_id` matches the authenticated user's ID.\n5. If the deletion is successful and a record was found, return a `NextResponse` with a 204 No Content status. If no record was found or not authorized for the user, return a `NextResponse.json` with a 404 status and an error message. Handle potential database errors by returning a 500 status."}