{"id":"project-setup-01","title":"Initialize Git, create .gitignore and README","description":"Initialize a Git repository. Create a `.gitignore` file based on standard Next.js, Node.js, and macOS/Windows development practices. Create a `README.md` with the project title and description from the `manifest.json`. Create a `.prettierrc` file with standard formatting rules.","expected_files":[".gitignore","README.md",".prettierrc"],"checks":["file .gitignore exists","file README.md exists","file .prettierrc exists","README.md contains 'Agent Architect AI'",".gitignore contains '/node_modules'",".prettierrc contains 'semi: false'"],"prompt_template":"SYSTEM: You are an expert developer setting up a new Next.js project. Refer to the project configuration in `/machine/manifest.json` for the project name and description.\n\nUSER: Create the following files with the specified content:\n\n1.  `.gitignore`:\n    ```\n    .DS_Store\n    node_modules\n    /out\n    /.next\n    /.env\n    /.env.local\n    /.env.development.local\n    /.env.production.local\n    npm-debug.log*\n    yarn-debug.log*\n    yarn-error.log*\n    .pnpm-debug.log*\n    .vercel\n    coverage\n    *.log\n    *.tsbuildinfo\n    .eslintcache\n    ```\n\n2.  `README.md`:\n    ```markdown\n    # Agent Architect AI\n\n    An AI-powered platform that transforms raw app ideas into structured, multi-stage build plans, complete with tasks suitable for AI coding agents and detailed blueprints for no-code platforms.\n\n    ## Getting Started\n\n    ...\n    ```\n\n3.  `.prettierrc`:\n    ```json\n    {\n      \"semi\": false,\n      \"singleQuote\": true,\n      \"printWidth\": 100,\n      \"trailingComma\": \"all\"\n    }\n    ```\n"}
{"id":"project-setup-02","title":"Create initial package.json","description":"Generate the initial `package.json` file. It should include basic project metadata, development scripts (`dev`, `build`, `start`, `lint`, `test`, `e2e`), and all necessary dependencies for a Next.js 14 project with React, TypeScript, Tailwind CSS, Supabase, OpenAI, Jest, and Cypress as specified in the project configuration.","expected_files":["package.json"],"checks":["file package.json exists","package.json contains 'next'","package.json contains 'typescript'","package.json contains 'tailwindcss'","package.json contains '@supabase/supabase-js'","package.json contains 'openai'","package.json contains 'jest'","package.json contains 'cypress'","package.json contains 'dev' script","package.json contains 'test' script","package.json contains 'e2e' script"],"prompt_template":"SYSTEM: You are an expert Node.js developer. You need to create a `package.json` file for a Next.js 14 project using TypeScript, Tailwind CSS, Supabase, OpenAI, Jest, and Cypress.\n\nUSER: Create the `package.json` file with the following content. Ensure all specified dependencies and devDependencies are included with reasonable starting versions. Define `private: true`.\n\n```json\n{\n  \"name\": \"agent-architect-ai\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"test\": \"jest --watchAll\",\n    \"test:ci\": \"jest --ci\",\n    \"e2e\": \"cypress open\"\n  },\n  \"dependencies\": {\n    \"next\": \"^14.0.0\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"@supabase/supabase-js\": \"^2.39.3\",\n    \"openai\": \"^4.26.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.11.5\",\n    \"@types/react\": \"^18.2.48\",\n    \"@types/react-dom\": \"^18.2.18\",\n    \"autoprefixer\": \"^10.4.17\",\n    \"postcss\": \"^8.4.33\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"eslint\": \"^8.56.0\",\n    \"eslint-config-next\": \"^14.0.0\",\n    \"typescript\": \"^5.3.3\",\n    \"jest\": \"^29.7.0\",\n    \"@types/jest\": \"^29.5.12\",\n    \"jest-environment-jsdom\": \"^29.7.0\",\n    \"ts-jest\": \"^29.1.2\",\n    \"cypress\": \"^13.6.4\"\n  }\n}\n```"}
{"id":"project-setup-03","title":"Configure tsconfig.json","description":"Create and configure the `tsconfig.json` file with standard settings for a Next.js TypeScript project, ensuring proper module resolution and JSX support.","expected_files":["tsconfig.json"],"checks":["file tsconfig.json exists","tsconfig.json contains 'compilerOptions'","tsconfig.json contains 'next'","tsconfig.json contains 'paths'"],"prompt_template":"SYSTEM: You are a TypeScript expert. Create the `tsconfig.json` file for a Next.js project. This configuration should be standard for Next.js 14 with app router and modern TypeScript practices.\n\nUSER: Create the `tsconfig.json` file with the following content:\n\n```json\n{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n```"}
{"id":"project-setup-04","title":"Create next.config.js","description":"Create a minimal `next.config.js` file for Next.js configuration.","expected_files":["next.config.js"],"checks":["file next.config.js exists","next.config.js contains 'nextConfig'"],"prompt_template":"SYSTEM: You are a Next.js configuration expert. Create a basic `next.config.js` file.\n\nUSER: Create the `next.config.js` file with the following content:\n\n```javascript\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nmodule.exports = nextConfig;\n```"}
{"id":"project-setup-05","title":"Configure Tailwind CSS and PostCSS","description":"Create and configure `tailwind.config.js` to include paths for all Next.js components and pages, enabling JIT mode. Create `postcss.config.js` to include `tailwindcss` and `autoprefixer`.","expected_files":["tailwind.config.js","postcss.config.js"],"checks":["file tailwind.config.js exists","file postcss.config.js exists","tailwind.config.js contains 'content'","postcss.config.js contains 'tailwindcss'"],"prompt_template":"SYSTEM: You are a frontend expert setting up Tailwind CSS for a Next.js project.\n\nUSER: Create the following files with the specified content:\n\n1.  `tailwind.config.js`:\n    ```javascript\n    /** @type {import('tailwindcss').Config} */\n    module.exports = {\n      content: [\n        './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n        './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n        './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n      ],\n      theme: {\n        extend: {\n          backgroundImage: {\n            'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',\n            'gradient-conic':\n              'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',\n          },\n        },\n      },\n      plugins: [],\n    };\n    ```\n\n2.  `postcss.config.js`:\n    ```javascript\n    module.exports = {\n      plugins: {\n        tailwindcss: {},\n        autoprefixer: {},\n      },\n    };\n    ```"}
{"id":"project-setup-06","title":"Create global.css with Tailwind directives","description":"Create `src/styles/globals.css` and add the basic Tailwind CSS directives (`@tailwind base`, `@tailwind components`, `@tailwind utilities`).","expected_files":["src/styles/globals.css"],"checks":["file src/styles/globals.css exists","src/styles/globals.css contains '@tailwind base'"],"prompt_template":"SYSTEM: You are a CSS expert setting up global styles for a Next.js project using Tailwind CSS.\n\nUSER: Create the file `src/styles/globals.css` with the following content:\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```"}
{"id":"project-setup-07","title":"Create src/app/layout.tsx","description":"Create the root `layout.tsx` file for the Next.js app router. It should include basic HTML structure, define metadata, and wrap children. Import `src/styles/globals.css`.","expected_files":["src/app/layout.tsx"],"checks":["file src/app/layout.tsx exists","src/app/layout.tsx contains 'RootLayout'","src/app/layout.tsx contains 'children: React.ReactNode'","src/app/layout.tsx imports 'globals.css'"],"prompt_template":"SYSTEM: You are a Next.js developer. Create the root layout component for the Next.js 14 app router. This file should be named `layout.tsx` and located at `src/app/layout.tsx`.\n\nUSER: Create the `src/app/layout.tsx` file with the following content. It should define basic HTML structure, include a `metadata` object with the project name 'Agent Architect AI', and import the global CSS file located at `../styles/globals.css`.\n\n```tsx\nimport type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport '../styles/globals.css';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'Agent Architect AI',\n  description: 'AI-powered platform to transform ideas into build plans.',\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>{children}</body>\n    </html>\n  );\n}\n```"}
{"id":"project-setup-08","title":"Create src/app/page.tsx","description":"Create the root `page.tsx` file for the Next.js app router. This will be the initial landing page, starting with a simple 'Hello, Agent Architect AI!' message.","expected_files":["src/app/page.tsx"],"checks":["file src/app/page.tsx exists","src/app/page.tsx contains 'Home'","src/app/page.tsx contains 'Hello, Agent Architect AI!'"],"prompt_template":"SYSTEM: You are a Next.js developer. Create the root page component for the Next.js 14 app router. This file should be named `page.tsx` and located at `src/app/page.tsx`.\n\nUSER: Create the `src/app/page.tsx` file with the following content. It should be a simple React functional component named `Home` that renders a `main` element containing a `h1` tag with the text 'Hello, Agent Architect AI!'.\n\n```tsx\nexport default function Home() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-center p-24\">\n      <h1 className=\"text-4xl font-bold\">Hello, Agent Architect AI!</h1>\n      <p className=\"mt-4 text-lg text-gray-600\">Your idea, structured by AI.</p>\n    </main>\n  );\n}\n```"}
{"id":"project-setup-09","title":"Add favicon.ico and vercel.svg to public directory","description":"Add placeholder `favicon.ico` and `vercel.svg` files to the `public` directory. These can be minimal or empty files for now, as they are part of the initial project structure.","expected_files":["public/favicon.ico","public/vercel.svg"],"checks":["file public/favicon.ico exists","file public/vercel.svg exists"],"prompt_template":"SYSTEM: You are a frontend developer. Create placeholder files for public assets.\n\nUSER: Create the following files. The content can be minimal or empty, as they are placeholders for the initial project setup.\n\n1.  `public/favicon.ico` (can be an empty file)\n2.  `public/vercel.svg` (can be a minimal SVG or empty file, e.g., `<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 2L2 22H22L12 2Z\" fill=\"black\"/></svg>`)"}
{"id":"project-setup-10","title":"Create .env.local with placeholders","description":"Create the `.env.local` file with placeholder environment variables for Supabase (`NEXT_PUBLIC_SUPABASE_URL`, `NEXT_PUBLIC_SUPABASE_ANON_KEY`, `SUPABASE_SERVICE_ROLE_KEY`, `SUPABASE_JWT_SECRET`) and OpenAI (`OPENAI_API_KEY`), as these are crucial integrations for the project.","expected_files":[".env.local"],"checks":["file .env.local exists",".env.local contains 'NEXT_PUBLIC_SUPABASE_URL'",".env.local contains 'OPENAI_API_KEY'"],"prompt_template":"SYSTEM: You are a backend developer. Create the environment variable file for a Next.js project.\n\nUSER: Create the `.env.local` file with the following placeholder environment variables. These are essential for connecting to Supabase and OpenAI.\n\n```\n# Supabase\nNEXT_PUBLIC_SUPABASE_URL=\"YOUR_SUPABASE_PROJECT_URL\"\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\"YOUR_SUPABASE_ANON_KEY\"\nSUPABASE_SERVICE_ROLE_KEY=\"YOUR_SUPABASE_SERVICE_ROLE_KEY\" # Used for server-side operations, keep secret\nSUPABASE_JWT_SECRET=\"YOUR_SUPABASE_JWT_SECRET\" # Used for JWT signing/verification in server, keep secret\n\n# OpenAI\nOPENAI_API_KEY=\"YOUR_OPENAI_API_KEY\"\n```"}
{"id":"project-setup-11","title":"Create Supabase client files","description":"Create `src/lib/supabase/client.ts` and `src/lib/supabase/server.ts`. These files should export initialized Supabase client instances, one configured for client-side usage (using `NEXT_PUBLIC_` environment variables) and one for server-side usage (using server-only environment variables), both utilizing `createClient` from `@supabase/supabase-js`.","expected_files":["src/lib/supabase/client.ts","src/lib/supabase/server.ts"],"checks":["file src/lib/supabase/client.ts exists","file src/lib/supabase/server.ts exists","src/lib/supabase/client.ts exports 'createClient'","src/lib/supabase/server.ts exports 'createClient'"],"prompt_template":"SYSTEM: You are a backend and Next.js expert. Create the Supabase client initialization files.\n\nUSER: Create the following files with the specified content. Ensure they correctly initialize Supabase clients using environment variables for both client-side and server-side contexts.\n\n1.  `src/lib/supabase/client.ts`:\n    ```tsx\n    import { createBrowserClient } from '@supabase/ssr';\n\n    export function createClient() {\n      return createBrowserClient(\n        process.env.NEXT_PUBLIC_SUPABASE_URL!,\n        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n      );\n    }\n    ```\n\n2.  `src/lib/supabase/server.ts`:\n    ```tsx\n    import { createServerClient, type CookieOptions } from '@supabase/ssr';\n    import { cookies } from 'next/headers';\n\n    export function createClient() {\n      const cookieStore = cookies();\n\n      return createServerClient(\n        process.env.NEXT_PUBLIC_SUPABASE_URL!,\n        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n        {\n          cookies: {\n            get(name: string) {\n              return cookieStore.get(name)?.value;\n            },\n            set(name: string, value: string, options: CookieOptions) {\n              try {\n                cookieStore.set({ name, value, ...options });\n              } catch (error) {\n                // The `cookies().set()` method can only be called in a Server Component or Server Action\n                // from your App Router. If you're using a Client Component, you'll have to wait for a\n                // Server Action to be called. In this case, you can pass an empty object.\n              }\n            },\n            remove(name: string, options: CookieOptions) {\n              try {\n                cookieStore.set({ name, value: '', ...options });\n              } catch (error) {\n                // The `cookies().set()` method can only be called in a Server Component or Server Action\n                // from your App Router. If you're using a Client Component, you'll have to wait for a\n                // Server Action to be called. In this case, you can pass an empty object.\n              }\n            },\n          },\n        }\n      );\n    }\n    ```"}
{"id":"project-setup-12","title":"Create OpenAI client file","description":"Create `src/lib/openai/index.ts` and initialize the OpenAI client using the `OPENAI_API_KEY` from environment variables.","expected_files":["src/lib/openai/index.ts"],"checks":["file src/lib/openai/index.ts exists","src/lib/openai/index.ts exports 'openai'","src/lib/openai/index.ts uses 'process.env.OPENAI_API_KEY'"],"prompt_template":"SYSTEM: You are a backend expert. Create the OpenAI client initialization file.\n\nUSER: Create the file `src/lib/openai/index.ts` with the following content. It should initialize and export an instance of the `OpenAI` client using the `OPENAI_API_KEY` environment variable.\n\n```typescript\nimport OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY, // This is also the default, can be omitted\n});\n\nexport default openai;\n```"}
{"id":"project-setup-13","title":"Create placeholder index files for utils, hooks, and types","description":"Create empty `index.ts` files in `src/lib/utils`, `src/hooks`, and `src/types`. These will serve as entry points for future utilities, hooks, and global type definitions.","expected_files":["src/lib/utils/index.ts","src/hooks/index.ts","src/types/index.d.ts"],"checks":["file src/lib/utils/index.ts exists","file src/hooks/index.ts exists","file src/types/index.d.ts exists"],"prompt_template":"SYSTEM: You are a project scaffolder. Create placeholder index files for various directories.\n\nUSER: Create the following empty files to establish the initial directory structure for utilities, hooks, and types:\n\n1.  `src/lib/utils/index.ts` (empty file)\n2.  `src/hooks/index.ts` (empty file)\n3.  `src/types/index.d.ts` (empty file, for global type declarations)"}
{"id":"project-setup-14","title":"Create GitHub Actions workflow for Vercel deployment","description":"Create the `.github/workflows/deploy.yml` file to configure continuous deployment to Vercel using GitHub Actions. The workflow should trigger on pushes to the `main` branch, build the Next.js application, and deploy it to Vercel. Ensure it uses the Vercel Action and securely handles the Vercel API token.","expected_files":[".github/workflows/deploy.yml"],"checks":["file .github/workflows/deploy.yml exists","deploy.yml contains 'name: Deploy to Vercel'","deploy.yml contains 'vercel-action'","deploy.yml contains 'VERCEL_TOKEN'"],"prompt_template":"SYSTEM: You are a DevOps engineer. Create a GitHub Actions workflow for deploying a Next.js application to Vercel.\n\nUSER: Create the file `.github/workflows/deploy.yml` with the following content. This workflow should automate the deployment process to Vercel whenever changes are pushed to the `main` branch. It should use the Vercel GitHub Action and include necessary environment variables for Vercel Project ID and Organization ID, in addition to the Vercel API Token (managed as a GitHub Secret).\n\n```yaml\nname: Deploy to Vercel\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Install Vercel CLI\n        run: npm install --global vercel@latest\n\n      - name: Pull Vercel Environment Information\n        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}\n\n      - name: Build Project Artifacts\n        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}\n\n      - name: Deploy to Vercel\n        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}\n        env:\n          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}\n          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}\n```"}